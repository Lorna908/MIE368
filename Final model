{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"rE1g7QaxuyHl","executionInfo":{"status":"ok","timestamp":1733290210716,"user_tz":300,"elapsed":9906,"user":{"displayName":"오근주","userId":"03177099604322788127"}}},"outputs":[],"source":["# Please put import here!\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import mutual_info_score\n","from sklearn.feature_selection import mutual_info_classif\n","from sklearn.model_selection import cross_val_score\n","from sklearn.ensemble import RandomForestClassifier  # Change to appropriate model\n","import numpy as np\n","from sklearn.linear_model import LinearRegression, LassoCV\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error, r2_score\n","import seaborn as sns"]},{"cell_type":"markdown","metadata":{"id":"fmENLQCEwsiu"},"source":["## Data Preprocessing"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":36363,"status":"ok","timestamp":1733290280426,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"QI26-B-N3dgg","outputId":"20b447f8-3cad-49aa-8c60-a56753f58cbc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["# Mount Google Drive (if needed)\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":60243,"status":"ok","timestamp":1733290863283,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"6_fYUaOVvb9D"},"outputs":[],"source":["# Load the flight and weather data\n","# Before run this code, please download the csv files and upload the files\n","df1 = pd.read_csv('/content/drive/MyDrive/new.csv')\n","df2 = pd.read_csv('/content/drive/MyDrive/WeatherEvents_Jan2016-Dec2022.csv')"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"E_7BbDooCEpB","executionInfo":{"status":"ok","timestamp":1733290883700,"user_tz":300,"elapsed":20419,"user":{"displayName":"오근주","userId":"03177099604322788127"}}},"outputs":[],"source":["flight_data = df1.copy()\n","weather_data = df2.copy()\n","# Ensure both 'Flight_Date' columns are in datetime format (without time part)\n","flight_data['Flight_Date'] = pd.to_datetime(flight_data['Flight_Date']).dt.date\n","weather_data['Flight_Date'] = pd.to_datetime(weather_data['StartTime(UTC)']).dt.date\n","\n","# Clean city and state data\n","flight_data['Origin_State'] = flight_data['Origin_City'].apply(lambda x: x.split(',')[1].strip())\n","flight_data['Origin_City'] = flight_data['Origin_City'].apply(lambda x: x.split(',')[0].strip())\n","\n","weather_data['Origin_City'] = weather_data['City'].str.strip()\n","weather_data['Origin_State'] = weather_data['State'].str.strip()\n","\n","# Perform a left join to keep all flight data, even if no matching weather event\n","combined_data = pd.merge(\n","    flight_data,\n","    weather_data[['Flight_Date', 'Origin_City', 'Origin_State', 'Type', 'Severity', 'Precipitation(in)']],\n","    on=['Flight_Date', 'Origin_City', 'Origin_State'],\n","    how='left'\n",")"]},{"cell_type":"markdown","metadata":{"id":"Gcl8jIeUKplQ"},"source":["## Final Model"]},{"cell_type":"markdown","metadata":{"id":"o-5EE8OQKsYd"},"source":["1. Data Cleaning\n","* Categorical -> numerical"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"m_OTl8fdPGTg","executionInfo":{"status":"ok","timestamp":1733290885516,"user_tz":300,"elapsed":1818,"user":{"displayName":"오근주","userId":"03177099604322788127"}}},"outputs":[],"source":["from sklearn.preprocessing import LabelEncoder\n","\n","# Create a LabelEncoder object\n","le = LabelEncoder()\n","\n","# Specify the columns to convert\n","categorical_cols = ['Airline_Name', 'Origin_City', 'Origin_State', 'Destination_City',\n","                    'Cancellation_Code', 'Cancelled_Flag', 'Diverted_Flag', 'Type', 'Severity']\n","\n","# Replace NaN with 0 and apply label encoding to each column\n","for col in categorical_cols:\n","    combined_data[col] = combined_data[col].fillna(0)  # Replace NaN with 0\n","    combined_data[col] = le.fit_transform(combined_data[col].astype(str))  # Encode column\n"]},{"cell_type":"markdown","metadata":{"id":"MOwtvu2HO8QH"},"source":["* One hot key encoding - date"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":724,"status":"ok","timestamp":1733290886239,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"qNjTyQx0PGvA","outputId":"cede98c9-01fd-4795-f085-f02b1f1bf964"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-6-31fef0d917ee>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  combined_data.drop('Flight_Date', axis=1, inplace=True)\n"]}],"source":["combined_data['Year'] = pd.to_datetime(combined_data['Flight_Date']).dt.year\n","combined_data['Month'] = pd.to_datetime(combined_data['Flight_Date']).dt.month\n","combined_data['DayOfMonth'] = pd.to_datetime(combined_data['Flight_Date']).dt.day\n","combined_data['DayOfWeek'] = pd.to_datetime(combined_data['Flight_Date']).dt.day_name()\n","combined_data = combined_data[combined_data['Year'] < 2023]\n","combined_data.drop('Flight_Date', axis=1, inplace=True)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"Vhyfa3XaTwhq","executionInfo":{"status":"ok","timestamp":1733290886520,"user_tz":300,"elapsed":282,"user":{"displayName":"오근주","userId":"03177099604322788127"}}},"outputs":[],"source":["combined_data = pd.get_dummies(combined_data, columns=['DayOfWeek', 'Month'], dtype=int)\n","\n","#replace the column name of the DayOfWeek columns into the weekday names\n","weather = {''}\n","mapper_week = {'DayOfWeek_Monday': 'Monday', 'DayOfWeek_Tuesday': 'Tuesday', 'DayOfWeek_Wednesday': 'Wednesday',\n","                   'DayOfWeek_Thursday': 'Thursday', 'DayOfWeek_Friday': 'Friday', 'DayOfWeek_Saturday': 'Saturday',\n","                   'DayOfWeek_Sunday': 'Sunday'}\n","combined_data.rename(columns=mapper_week,inplace=True)\n","# replace the column name of the Month columns into the month names\n","mapper_month = {'Month_1': 'January', 'Month_2': 'February', 'Month_3': 'March',\n","                    'Month_4': 'April', 'Month_5': 'May', 'Month_6': 'June',\n","                    'Month_7': 'July', 'Month_8': 'August', 'Month_9': 'September',\n","                    'Month_10': 'October', 'Month_11': 'November', 'Month_12': 'December'}\n","combined_data.rename(columns=mapper_month, inplace=True)\n","\n","#drop one of the columns to avoid multicollinearity\n","combined_data.drop(['Monday', 'January'], axis=1, inplace=True)"]},{"cell_type":"markdown","metadata":{"id":"vBMFBGxSAkO1"},"source":["* HH:MM into minutes"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"4-hsrAlgAuva","executionInfo":{"status":"ok","timestamp":1733290889342,"user_tz":300,"elapsed":2823,"user":{"displayName":"오근주","userId":"03177099604322788127"}}},"outputs":[],"source":["def convert_to_min(time_str):\n","    if pd.isna(time_str):  # Check for NaN values\n","        return 0.0\n","    hours, minutes = map(int, time_str.split(':'))\n","    return hours * 60 + minutes\n","\n","# Apply the function to each delay column\n","combined_data['Carrier_Delay_Hours'] = combined_data['Carrier_Delay_HH_MM'].apply(convert_to_min)\n","combined_data['Weather_Delay_Hours'] = combined_data['Weather_Delay_HH_MM'].apply(convert_to_min)\n","combined_data['NAS_Delay_Hours'] = combined_data['NAS_Delay_HH_MM'].apply(convert_to_min)\n","combined_data['Security_Delay_Hours'] = combined_data['Security_Delay_HH_MM'].apply(convert_to_min)\n","combined_data['Late_Aircraft_Delay_Hours'] = combined_data['Late_Aircraft_Delay_HH_MM'].apply(convert_to_min)\n","\n","combined_data.drop(['Carrier_Delay_HH_MM', 'Weather_Delay_HH_MM', 'NAS_Delay_HH_MM',\n","                    'Security_Delay_HH_MM', 'Late_Aircraft_Delay_HH_MM'], axis=1, inplace=True)\n"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"executionInfo":{"elapsed":108,"status":"ok","timestamp":1733290889449,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"ved6hUS80puH","outputId":"47b01831-271a-4608-ffbe-886a3867e809"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Airline_Name  Origin_City  Destination_City  Cancelled_Flag  \\\n","0            10          109                41               1   \n","1             2          180               213               1   \n","3             4          229               279               1   \n","6             2          336                81               1   \n","8            14          270               295               1   \n","\n","   Cancellation_Code  Diverted_Flag  Scheduled_Elapsed_Time_Minutes  \\\n","0                  2              1                           184.0   \n","1                  2              1                           282.0   \n","3                  2              1                            87.0   \n","6                  2              1                           199.0   \n","8                  2              1                            84.0   \n","\n","   Actual_Elapsed_Time_Minutes  Origin_State  Type  ...  August  September  \\\n","0                        255.0             8     0  ...       0          0   \n","1                        283.0            32     0  ...       0          0   \n","3                         78.0            33     0  ...       0          0   \n","6                        200.0             7     0  ...       1          0   \n","8                         89.0            32     2  ...       0          0   \n","\n","   October  November  December  Carrier_Delay_Hours  Weather_Delay_Hours  \\\n","0        0         0         1                 1564                  284   \n","1        0         0         0                 1838                  868   \n","3        1         0         0                 2692                  288   \n","6        0         0         0                 1074                   86   \n","8        0         0         1                 1642                  769   \n","\n","   NAS_Delay_Hours  Security_Delay_Hours  Late_Aircraft_Delay_Hours  \n","0               64                    98                        217  \n","1              170                   279                        503  \n","3              279                   169                        638  \n","6              642                   236                        164  \n","8              555                   126                        136  \n","\n","[5 rows x 36 columns]"],"text/html":["\n","  <div id=\"df-3f0fafa8-9fc5-4ef2-a257-181cada38af1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Airline_Name</th>\n","      <th>Origin_City</th>\n","      <th>Destination_City</th>\n","      <th>Cancelled_Flag</th>\n","      <th>Cancellation_Code</th>\n","      <th>Diverted_Flag</th>\n","      <th>Scheduled_Elapsed_Time_Minutes</th>\n","      <th>Actual_Elapsed_Time_Minutes</th>\n","      <th>Origin_State</th>\n","      <th>Type</th>\n","      <th>...</th>\n","      <th>August</th>\n","      <th>September</th>\n","      <th>October</th>\n","      <th>November</th>\n","      <th>December</th>\n","      <th>Carrier_Delay_Hours</th>\n","      <th>Weather_Delay_Hours</th>\n","      <th>NAS_Delay_Hours</th>\n","      <th>Security_Delay_Hours</th>\n","      <th>Late_Aircraft_Delay_Hours</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10</td>\n","      <td>109</td>\n","      <td>41</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>184.0</td>\n","      <td>255.0</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1564</td>\n","      <td>284</td>\n","      <td>64</td>\n","      <td>98</td>\n","      <td>217</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>180</td>\n","      <td>213</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>282.0</td>\n","      <td>283.0</td>\n","      <td>32</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1838</td>\n","      <td>868</td>\n","      <td>170</td>\n","      <td>279</td>\n","      <td>503</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>229</td>\n","      <td>279</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>87.0</td>\n","      <td>78.0</td>\n","      <td>33</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2692</td>\n","      <td>288</td>\n","      <td>279</td>\n","      <td>169</td>\n","      <td>638</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>2</td>\n","      <td>336</td>\n","      <td>81</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>199.0</td>\n","      <td>200.0</td>\n","      <td>7</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1074</td>\n","      <td>86</td>\n","      <td>642</td>\n","      <td>236</td>\n","      <td>164</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>14</td>\n","      <td>270</td>\n","      <td>295</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>84.0</td>\n","      <td>89.0</td>\n","      <td>32</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1642</td>\n","      <td>769</td>\n","      <td>555</td>\n","      <td>126</td>\n","      <td>136</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 36 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f0fafa8-9fc5-4ef2-a257-181cada38af1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3f0fafa8-9fc5-4ef2-a257-181cada38af1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3f0fafa8-9fc5-4ef2-a257-181cada38af1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-95b75b0f-7855-4d09-9eeb-48434c55731d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-95b75b0f-7855-4d09-9eeb-48434c55731d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-95b75b0f-7855-4d09-9eeb-48434c55731d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"combined_data"}},"metadata":{},"execution_count":9}],"source":["combined_data.drop(['Scheduled_Departure_Time','Actual_Departure_Time','Departure_Delay_Minutes','Scheduled_Arrival_Time','Actual_Arrival_Time','Arrival_Delay_Minutes'], axis=1, inplace=True)\n","combined_data.head()"]},{"cell_type":"markdown","metadata":{"id":"VNQm9ftCAw6c"},"source":["* delay time"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":113,"status":"ok","timestamp":1733290889695,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"7puIdoti2Ee5","outputId":"a5c5fc6e-a99d-4bd8-ffd1-424379f8ac7d"},"outputs":[{"output_type":"stream","name":"stdout","text":["18870\n","99760\n"]}],"source":["delay_threshold_min = 180    # 3 hours is based on Recommended Check-in time (prior to boarding time) from airlines\n","temp1 = combined_data[combined_data[\"Carrier_Delay_Hours\"] < delay_threshold_min][\"Carrier_Delay_Hours\"]\n","temp2 = combined_data[combined_data[\"Carrier_Delay_Hours\"] >= delay_threshold_min][\"Carrier_Delay_Hours\"]\n","print(temp1.count())\n","print(temp2.count())"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"elapsed":141,"status":"ok","timestamp":1733290889835,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"oK6rJc-z691l","outputId":"8cf684c7-eedd-4614-cab4-14f503ecfaaa"},"outputs":[{"output_type":"stream","name":"stdout","text":["0         1564\n","1         1838\n","3         2692\n","6         1074\n","8         1642\n","          ... \n","126298    2008\n","126299    2008\n","126300    2008\n","126301    2779\n","126302    1611\n","Name: Carrier_Delay_Hours, Length: 99760, dtype: int64\n","17         18\n","18          2\n","20        130\n","21        130\n","29         78\n","         ... \n","126217    115\n","126218    115\n","126219    115\n","126263      5\n","126282     16\n","Name: Carrier_Delay_Hours, Length: 18870, dtype: int64\n","0         1.0\n","1         1.0\n","3         1.0\n","6         1.0\n","8         1.0\n","         ... \n","126298    1.0\n","126299    1.0\n","126300    1.0\n","126301    1.0\n","126302    1.0\n","Name: Carrier_Delay_Hours, Length: 99664, dtype: float64\n","17        0.0\n","18        0.0\n","20        0.0\n","21        0.0\n","29        0.0\n","         ... \n","126217    0.0\n","126218    0.0\n","126219    0.0\n","126263    0.0\n","126282    0.0\n","Name: Carrier_Delay_Hours, Length: 18870, dtype: float64\n"]}],"source":["x = combined_data[\"Carrier_Delay_Hours\"]\n","print(x[x>=delay_threshold_min])\n","print(x[x<delay_threshold_min])\n","\n","x = combined_data[\"Carrier_Delay_Hours\"] - delay_threshold_min   # Make values negative based on threshold\n","#combined_data[\"Carrier_Delay_Hours\"]\n","\n","y = (x - x.abs())/(2*x.abs()) + 1\n","print(y[y==1])\n","print(y[y==0])"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"1eaYMktu1V7P","executionInfo":{"status":"ok","timestamp":1733290889835,"user_tz":300,"elapsed":1,"user":{"displayName":"오근주","userId":"03177099604322788127"}}},"outputs":[],"source":["delay_list = [\"Carrier_Delay_Hours\", \"Weather_Delay_Hours\", \"NAS_Delay_Hours\", \"Security_Delay_Hours\", \"Late_Aircraft_Delay_Hours\"]\n","\n","for delay_factor in delay_list:\n","  label = delay_factor.split(\"_\")[0] + \"_delayed\"\n","  if(label == \"Late_delayed\"): label = \"Late_Aircraft_delayed\"\n","  combined_data[label] = (combined_data[delay_factor] - combined_data[delay_factor].abs())/(2*combined_data[delay_factor].abs()) + 1\n"]},{"cell_type":"code","source":["delay_list = [\"Carrier_Delay_Hours\", \"Weather_Delay_Hours\", \"NAS_Delay_Hours\", \"Security_Delay_Hours\", \"Late_Aircraft_Delay_Hours\"]\n","\n","for delay_factor in delay_list:\n","    # Create a label column name\n","    label = delay_factor.split(\"_\")[0] + \"_delayed\"\n","    if label == \"Late_delayed\":  # Adjust for \"Late_Aircraft\" naming\n","        label = \"Late_Aircraft_delayed\"\n","\n","    # Create binary labels: 1 if delay > 180, else 0\n","    combined_data[label] = (combined_data[delay_factor] > 180).astype(int)\n","\n"],"metadata":{"id":"WDZPmsYXpTSP","executionInfo":{"status":"ok","timestamp":1733290889986,"user_tz":300,"elapsed":1,"user":{"displayName":"오근주","userId":"03177099604322788127"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":248,"status":"ok","timestamp":1733290890233,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"1A2k7_BNAg8M","outputId":"473a4709-f709-4ad5-95d0-d4a9a7b73b7a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Carrier_delayed  Weather_delayed  NAS_delayed  Security_delayed  \\\n","0                     1                1            0                 0   \n","1                     1                1            0                 1   \n","3                     1                1            1                 0   \n","6                     1                0            1                 1   \n","8                     1                1            1                 0   \n","...                 ...              ...          ...               ...   \n","126298                1                1            1                 1   \n","126299                1                1            1                 1   \n","126300                1                1            1                 1   \n","126301                1                0            1                 0   \n","126302                1                1            1                 0   \n","\n","        Late_Aircraft_delayed  \n","0                           1  \n","1                           1  \n","3                           1  \n","6                           0  \n","8                           0  \n","...                       ...  \n","126298                      1  \n","126299                      1  \n","126300                      1  \n","126301                      0  \n","126302                      1  \n","\n","[118630 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-de71149c-0be7-46f9-bc1c-fe624601d17b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Carrier_delayed</th>\n","      <th>Weather_delayed</th>\n","      <th>NAS_delayed</th>\n","      <th>Security_delayed</th>\n","      <th>Late_Aircraft_delayed</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>126298</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>126299</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>126300</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>126301</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>126302</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>118630 rows × 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de71149c-0be7-46f9-bc1c-fe624601d17b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-de71149c-0be7-46f9-bc1c-fe624601d17b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-de71149c-0be7-46f9-bc1c-fe624601d17b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-59a4fc0e-0457-4383-b400-b9a8665fe681\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-59a4fc0e-0457-4383-b400-b9a8665fe681')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-59a4fc0e-0457-4383-b400-b9a8665fe681 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":14}],"source":["combined_data.drop(delay_list, axis=1, inplace=True)\n","combined_data[[\"Carrier_delayed\", \"Weather_delayed\", \"NAS_delayed\", \"Security_delayed\", \"Late_Aircraft_delayed\"]]"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"yoxGimDHW3Tk","executionInfo":{"status":"ok","timestamp":1733290890234,"user_tz":300,"elapsed":2,"user":{"displayName":"오근주","userId":"03177099604322788127"}}},"outputs":[],"source":["combined_data['delayTime'] = combined_data['Actual_Elapsed_Time_Minutes'] - combined_data['Scheduled_Elapsed_Time_Minutes']\n","combined_data.drop(['Actual_Elapsed_Time_Minutes','Scheduled_Elapsed_Time_Minutes'], axis=1, inplace=True)"]},{"cell_type":"code","source":["combined_data.Carrier_delayed.unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OhFeRg1hjWYb","executionInfo":{"status":"ok","timestamp":1733216958739,"user_tz":300,"elapsed":84,"user":{"displayName":"오근주","userId":"03177099604322788127"}},"outputId":"74b39817-f563-43a8-a69b-a2319d54caa9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 0])"]},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"mcWoVrfAlJEN"},"source":["3. Training Model\n","\n","Create train and test data"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"AFn4HQpTAoiG","executionInfo":{"status":"ok","timestamp":1733290890554,"user_tz":300,"elapsed":322,"user":{"displayName":"오근주","userId":"03177099604322788127"}}},"outputs":[],"source":["from sklearn.ensemble import RandomForestRegressor\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error, r2_score\n","features = ['Airline_Name', 'Origin_City', 'Destination_City', 'Cancelled_Flag',\n","            'Cancellation_Code', 'Diverted_Flag', 'Origin_State', 'Type',\n","            'Severity', 'Precipitation(in)', 'Year', 'DayOfMonth', 'Friday',\n","            'Saturday', 'Sunday', 'Thursday', 'Tuesday', 'Wednesday', 'February',\n","            'March', 'April', 'May', 'June', 'July', 'August', 'September',\n","            'October', 'November', 'December', 'Carrier_delayed', 'Weather_delayed',\n","            'NAS_delayed', 'Security_delayed', 'Late_Aircraft_delayed']\n","X = combined_data[features]\n","y = combined_data['delayTime']\n","\n","# Split into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"]},{"cell_type":"markdown","metadata":{"id":"K9lwQc8aGuwz"},"source":["Linear Regression with Lasso regularization"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1359,"status":"ok","timestamp":1733207820253,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"dyM4zWGBHPIK","outputId":"4a478aa4-06e3-46ee-c979-6c7e23c937b3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Root Mean Squared Error of linear regression with Lasso regularization: 20.1756709253371\n"]}],"source":["lasso = LassoCV()\n","lasso.fit(X_train, y_train)\n","y_lasso = lasso.predict(X_test)\n","\n","rmse_lasso = np.sqrt(mean_squared_error(y_test, y_lasso))\n","\n","print(f\"Root Mean Squared Error of linear regression with Lasso regularization: {rmse_lasso}\")"]},{"cell_type":"markdown","metadata":{"id":"UuFg1xuzCTgK"},"source":["RF"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":48206,"status":"ok","timestamp":1733207870431,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"Q_n3S-UPAyIb","outputId":"65af642a-aad1-4c58-9f0b-afb9abdd143b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Root Mean Squared Error of random forest with hypertuning: 14.60543554535095\n"]}],"source":["# Define and train the Random Forest Regressor\n","rf_regressor = RandomForestRegressor(\n","        random_state = 2,\n","        max_depth = 10,\n","        n_estimators = 150,\n","        max_samples = 0.8,\n","        bootstrap = True\n","    )\n","rf_regressor.fit(X_train, y_train)\n","\n","# Predict\n","y_rf = rf_regressor.predict(X_test)\n","\n","rmse_rf = np.sqrt(mean_squared_error(y_test, y_rf))\n","\n","# Print evaluation metrics\n","print(\"Root Mean Squared Error of random forest with hypertuning:\", rmse_rf)\n"]},{"cell_type":"markdown","metadata":{"id":"aaY2GR--MHer"},"source":["CART"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5157,"status":"ok","timestamp":1733290920708,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"ZWeLYwMVMIwL","outputId":"1849d501-00ec-41b5-9e8e-d3a6969fe692"},"outputs":[{"output_type":"stream","name":"stdout","text":["Root Mean Squared Error of CART: 11.692172758670461\n","3.874652280198938\n"]}],"source":["from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import mean_absolute_error\n","\n","cart_model = DecisionTreeClassifier(\n","    random_state=1,\n","    max_depth=50,\n","    min_samples_split=2,\n","    min_samples_leaf=1,\n","    max_features = None,\n","    criterion='entropy'\n",")\n","cart_model.fit(X_train, y_train)\n","y_cart = cart_model.predict(X_test)\n","rmse_cart = np.sqrt(mean_squared_error(y_test, y_cart))\n","# Print evaluation metrics\n","print(\"Root Mean Squared Error of CART:\", rmse_cart)\n","mae = mean_absolute_error(y_test, y_cart)\n","print(mae)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":580331,"status":"ok","timestamp":1733198313542,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"kNIQogK9opY_","outputId":"8db7819c-fd9f-4f9d-96e5-3623b57be423"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 5 folds for each of 216 candidates, totalling 1080 fits\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_split.py:776: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=5.\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["Best parameters: {'criterion': 'entropy', 'max_depth': 50, 'max_features': None, 'min_samples_leaf': 1, 'min_samples_split': 2}\n"]}],"source":["from sklearn.model_selection import GridSearchCV\n","\n","# Define hyperparameter grid\n","param_grid = {\n","    'max_depth': [10, 20, 50, None],\n","    'min_samples_split': [2, 5, 10],\n","    'min_samples_leaf': [1, 5, 10],\n","    'max_features': ['sqrt', 'log2', None],\n","    'criterion': ['gini', 'entropy']\n","}\n","\n","# Initialize grid search\n","grid_search = GridSearchCV(\n","    estimator=DecisionTreeClassifier(random_state=1),\n","    param_grid=param_grid,\n","    cv=5,  # 5-fold cross-validation\n","    scoring='accuracy',  # Adjust based on your metric\n","    verbose=1,\n","    n_jobs=-1\n",")\n","\n","# Fit grid search\n","grid_search.fit(X_train, y_train)\n","print(\"Best parameters:\", grid_search.best_params_)\n"]},{"cell_type":"markdown","metadata":{"id":"j6ndmvQar622"},"source":["Gradient Boosting"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":350},"executionInfo":{"elapsed":2487965,"status":"error","timestamp":1733204888689,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"nV2hv2whr56M","outputId":"c332bd46-d42f-432f-b468-20f24f40a745"},"outputs":[{"ename":"KeyboardInterrupt","evalue":"","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-143-c1a6216dd4eb>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensemble\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mGradientBoostingClassifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mgb_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGradientBoostingClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mgb_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0my_gb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgb_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mrmse_gb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmean_squared_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_gb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1471\u001b[0m                 )\n\u001b[1;32m   1472\u001b[0m             ):\n\u001b[0;32m-> 1473\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1475\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, monitor)\u001b[0m\n\u001b[1;32m    781\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    782\u001b[0m         \u001b[0;31m# fit the boosting stages\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 783\u001b[0;31m         n_stages = self._fit_stages(\n\u001b[0m\u001b[1;32m    784\u001b[0m             \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    785\u001b[0m             \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36m_fit_stages\u001b[0;34m(self, X, y, raw_predictions, sample_weight, random_state, X_val, y_val, sample_weight_val, begin_at_stage, monitor)\u001b[0m\n\u001b[1;32m    877\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    878\u001b[0m             \u001b[0;31m# fit next stage of trees\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 879\u001b[0;31m             raw_predictions = self._fit_stage(\n\u001b[0m\u001b[1;32m    880\u001b[0m                 \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    881\u001b[0m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36m_fit_stage\u001b[0;34m(self, i, X, y, raw_predictions, sample_weight, sample_mask, random_state, X_csc, X_csr)\u001b[0m\n\u001b[1;32m    488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    489\u001b[0m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_csc\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mX_csc\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 490\u001b[0;31m             tree.fit(\n\u001b[0m\u001b[1;32m    491\u001b[0m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mneg_g_view\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    492\u001b[0m             )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1471\u001b[0m                 )\n\u001b[1;32m   1472\u001b[0m             ):\n\u001b[0;32m-> 1473\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1475\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m   1375\u001b[0m         \"\"\"\n\u001b[1;32m   1376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1377\u001b[0;31m         super()._fit(\n\u001b[0m\u001b[1;32m   1378\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1379\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, X, y, sample_weight, check_input, missing_values_in_feature_mask)\u001b[0m\n\u001b[1;32m    470\u001b[0m             )\n\u001b[1;32m    471\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 472\u001b[0;31m         \u001b[0mbuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmissing_values_in_feature_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    473\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    474\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["from sklearn.ensemble import GradientBoostingClassifier\n","gb_model = GradientBoostingClassifier(n_estimators=20, random_state=0)\n","gb_model.fit(X_train, y_train)\n","y_gb = gb_model.predict(X_test)\n","rmse_gb = np.sqrt(mean_squared_error(y_test, y_gb))\n","# Print evaluation metrics\n","print(\"Root Mean Squared Error of Gradient Boosting:\", rmse_gb)"]},{"cell_type":"markdown","metadata":{"id":"wJnB5QuQMFsI"},"source":["What-if Scenarios"]},{"cell_type":"markdown","source":["Delay Factor"],"metadata":{"id":"rkCkgSrUYyP0"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":250,"status":"ok","timestamp":1733218019797,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"2-bJ5JsJA3UQ","outputId":"d61f8abb-294a-4757-d811-752b5f38f344"},"outputs":[{"output_type":"stream","name":"stdout","text":["Carrier delay exists: 5.63, Carrier delay does not exist: 6.02\n","Security delay exists: 7.49, Security delay does not exist: 5.70\n","NAS delay exists: 9.09, NAS delay does not exist: 2.92\n","Weather delay exists: 6.03, weather delay does not exist: 5.75\n","Late aircraft delay exists: 6.15, late aircraft delay does not exist: 5.80\n"]}],"source":["import pandas as pd\n","\n","def create_test_data(df, is_delay, features, delay_type):\n","    # Create a copy of the DataFrame to avoid modifying the original\n","    df_copy = df.copy()\n","    df_copy[delay_type] = is_delay\n","    x = df_copy[features]\n","    y = df_copy[delay_type]\n","    return x, y\n","\n","def simulate_factor(df, features, factor, model):\n","    result = []\n","\n","    # Filter rows based on the factor's condition\n","    delay_df = df.loc[df[factor] == 1]\n","    non_delay_df = df.loc[df[factor] == 0]\n","\n","    # Create test data for delayed and non-delayed cases\n","    test_delay, y_not_delay = create_test_data(non_delay_df, 1, features, factor)\n","    test_not_delay, y_delay = create_test_data(delay_df, 0, features, factor)\n","\n","    # Predict using the model\n","    simulate_delay = model.predict(test_delay)\n","    simulate_not_delay = model.predict(test_not_delay)\n","\n","    # Calculate differences between actual and simulated means\n","    result.append(y_not_delay.mean() - simulate_delay.mean())\n","    result.append(y_delay.mean() - simulate_not_delay.mean())\n","\n","    return result\n","\n","# Simulating factors\n","carrier_result = simulate_factor(pd.concat([X_test, y_test], axis=1), features, \"Carrier_delayed\", cart_model)\n","print(f\"Carrier delay exists: {carrier_result[0]:.2f}, Carrier delay does not exist: {carrier_result[1]:.2f}\")\n","\n","security_result = simulate_factor(pd.concat([X_test, y_test], axis=1), features, \"Security_delayed\", cart_model)\n","print(f\"Security delay exists: {security_result[0]:.2f}, Security delay does not exist: {security_result[1]:.2f}\")\n","\n","NAS_result = simulate_factor(pd.concat([X_test, y_test], axis=1), features, \"NAS_delayed\", cart_model)\n","print(f\"NAS delay exists: {NAS_result[0]:.2f}, NAS delay does not exist: {NAS_result[1]:.2f}\")\n","\n","weather_result = simulate_factor(pd.concat([X_test, y_test], axis=1), features, \"Weather_delayed\", cart_model)\n","print(f\"Weather delay exists: {weather_result[0]:.2f}, weather delay does not exist: {weather_result[1]:.2f}\")\n","\n","late_aircraft_result = simulate_factor(pd.concat([X_test, y_test], axis=1), features, \"Late_Aircraft_delayed\", cart_model)\n","print(f\"Late aircraft delay exists: {late_aircraft_result[0]:.2f}, late aircraft delay does not exist: {late_aircraft_result[1]:.2f}\")\n"]},{"cell_type":"markdown","source":["Weather Type"],"metadata":{"id":"ebZWmgOfY-uP"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":192,"status":"ok","timestamp":1733218061290,"user":{"displayName":"오근주","userId":"03177099604322788127"},"user_tz":300},"id":"LVsWozZdJ-a1","outputId":"9198c589-1a9d-4d6a-dad2-455827d1959b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Cold weather event exists: 7.46, Cold weather event does not exist: 9.26\n","Fog weather event exists: 8.39, Fog weather event does not exist: 6.44\n","Hail weather event exists: 9.36, Hail weather event does not exist: 17.91\n","Precipitation weather event exists: 10.29, Precipitation weather event does not exist: 4.27\n","Rain weather event exists: 11.29, Rain weather event does not exist: 6.01\n","Snow weather event exists: 12.19, Snow weather event does not exist: 0.20\n","Storm weather event exists: 13.20, Storm weather event does not exist: 12.26\n"]}],"source":["def create_test_data(df, is_delay, features, delay_type):\n","    # Create a copy of the DataFrame to avoid modifying the original\n","    df_copy = df.copy()\n","    df_copy[delay_type] = is_delay\n","    x = df_copy[features]\n","    y = df_copy[delay_type]\n","    return x, y\n","\n","def simulate_factor(df, features, value, factor, model):\n","    result = []\n","\n","    # Filter rows based on the factor's condition\n","    delay_df = df.loc[df[factor] == value]\n","    non_delay_df = df.loc[df[factor] == 0]\n","\n","    # Create test data for delayed and non-delayed cases\n","    test_delay, y_not_delay = create_test_data(non_delay_df, value, features, factor)\n","    test_not_delay, y_delay = create_test_data(delay_df, 0, features, factor)\n","\n","    # Predict using the model\n","    simulate_delay = model.predict(test_delay)\n","    simulate_not_delay = model.predict(test_not_delay)\n","\n","    # Calculate differences between actual and simulated means\n","    result.append(y_not_delay.mean() - simulate_delay.mean())\n","    result.append(y_delay.mean() - simulate_not_delay.mean())\n","\n","    return result\n","# Simulating factors\n","cold_result = simulate_factor(pd.concat([X_test, y_test], axis=1), features, 1, \"Type\", cart_model)\n","print(f\"Cold weather event exists: {cold_result[0]:.2f}, Cold weather event does not exist: {cold_result[1]:.2f}\")\n","\n","fog_result = simulate_factor(pd.concat([X_test, y_test], axis=1), features, 2, \"Type\", cart_model)\n","print(f\"Fog weather event exists: {fog_result[0]:.2f}, Fog weather event does not exist: {fog_result[1]:.2f}\")\n","\n","hail_result = simulate_factor(pd.concat([X_test, y_test], axis=1), features, 3, \"Type\", cart_model)\n","print(f\"Hail weather event exists: {hail_result[0]:.2f}, Hail weather event does not exist: {hail_result[1]:.2f}\")\n","\n","precipitation_result = simulate_factor(pd.concat([X_test, y_test], axis=1), features, 4, \"Type\", cart_model)\n","print(f\"Precipitation weather event exists: {precipitation_result[0]:.2f}, Precipitation weather event does not exist: {precipitation_result[1]:.2f}\")\n","\n","rain_result = simulate_factor(pd.concat([X_test, y_test], axis=1), features, 5, \"Type\", cart_model)\n","print(f\"Rain weather event exists: {rain_result[0]:.2f}, Rain weather event does not exist: {rain_result[1]:.2f}\")\n","\n","snow_result = simulate_factor(pd.concat([X_test, y_test], axis=1), features, 6, \"Type\", cart_model)\n","print(f\"Snow weather event exists: {snow_result[0]:.2f}, Snow weather event does not exist: {snow_result[1]:.2f}\")\n","\n","storm_result = simulate_factor(pd.concat([X_test, y_test], axis=1), features, 7, \"Type\", cart_model)\n","print(f\"Storm weather event exists: {storm_result[0]:.2f}, Storm weather event does not exist: {storm_result[1]:.2f}\")"]},{"cell_type":"code","source":[],"metadata":{"id":"sq0mjnp0jspA"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}